diff --git a/node_modules/vot.js/dist/utils/videoData.js b/node_modules/vot.js/dist/utils/videoData.js
index 9ab1c62..2532b39 100644
--- a/node_modules/vot.js/dist/utils/videoData.js
+++ b/node_modules/vot.js/dist/utils/videoData.js
@@ -9,18 +9,11 @@ class VideoDataError extends Error {
         this.message = message;
     }
 }
-export function getService(videoUrl) {
-    if (/(file:\/\/|(http(s)?:\/\/)(127\.0\.0\.1|localhost))/.exec(videoUrl))
-        return false;
-    let enteredURL;
-    try {
-        enteredURL = new URL(videoUrl);
-    }
-    catch (e) {
-        console.error(`Invalid URL: ${videoUrl}. Have you forgotten https?`);
-        return false;
-    }
-    const hostname = enteredURL.hostname;
+export function getService() {
+    if (/(http(s)?:\/\/)(127\.0\.0\.1|localhost)/.exec(window.location.href))
+        return [];
+    const hostname = window.location.hostname;
+    const enteredURL = new URL(window.location);
     const isMathes = (match) => {
         if (match instanceof RegExp) {
             return match.test(hostname);
@@ -33,14 +26,14 @@ export function getService(videoUrl) {
         }
         return false;
     };
-    return sites.find((e) => {
+    return sites.filter((e) => {
         return ((Array.isArray(e.match) ? e.match.some(isMathes) : isMathes(e.match)) &&
             e.host &&
             e.url);
     });
 }
-export async function getVideoID(service, videoURL) {
-    const url = new URL(videoURL);
+export async function getVideoID(service, video) {
+    const url = new URL(window.location.href);
     switch (service.host) {
         case VideoService.custom:
             return url.href;
@@ -67,6 +60,12 @@ export async function getVideoID(service, videoURL) {
             else if (paramOID && paramID) {
                 return `video-${Math.abs(parseInt(paramOID))}_${paramID}`;
             }
+
+            const videoBox = video.parentElement?.closest(".video_box_wrap");
+            if (videoBox) {
+                return videoBox.id.replace("video_box_wrap", "video");
+            }
+
             return null;
         }
         case VideoService.nine_gag:
@@ -223,12 +222,8 @@ export async function getVideoID(service, videoURL) {
             return undefined;
     }
 }
-export async function getVideoData(url) {
-    const service = getService(url);
-    if (!service) {
-        throw new VideoDataError(`URL: "${url}" is unknown service`);
-    }
-    const videoId = await getVideoID(service, url);
+export async function getVideoData(service, video) {
+    const videoId = await getVideoID(service, video);
     if (!videoId) {
         throw new VideoDataError(`Entered unsupported link: "${url}"`);
     }
