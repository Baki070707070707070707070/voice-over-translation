diff --git a/node_modules/vot.js/dist/config/sites.js b/node_modules/vot.js/dist/config/sites.js
index bfa6edc..d7598b2 100644
--- a/node_modules/vot.js/dist/config/sites.js
+++ b/node_modules/vot.js/dist/config/sites.js
@@ -238,6 +238,7 @@ export default [
         url: "https://coursehunter.net/course/",
         match: /^coursehunter.net$/,
         selector: "#oframeplayer > pjsdiv:nth-of-type(1)",
+        needExtraData: true,
     },
     {
         host: VideoService.okru,
diff --git a/node_modules/vot.js/dist/types/helpers/coursera.d.ts b/node_modules/vot.js/dist/types/helpers/coursera.d.ts
new file mode 100644
index 0000000..15d378e
--- /dev/null
+++ b/node_modules/vot.js/dist/types/helpers/coursera.d.ts
@@ -0,0 +1,52 @@
+export type Course = {
+  categoryIds: unknown[];
+  courseStatus: string;
+  description: string;
+  enrollableSiteUserRoles: unknown[];
+  estimatedWorkload: string;
+  id: string;
+  instructorIds: string[];
+  isReal: boolean;
+  isRestrictedMembership: boolean;
+  isSubtitleTranslationEnabled: boolean;
+  isVerificationEnabled: boolean;
+  launchedAt: number;
+  name: string;
+  partnerIds: string[];
+  previewUserIds: unknown[];
+  primaryLanguageCodes: string[];
+  promoPhoto: string;
+  slug: string;
+  subtitleLanguageCodes: string[];
+  verificationEnabledAt: number;
+}
+
+// not fully typed
+export type Cache = {
+  duration: number;
+}
+
+export type Source = {
+  src: string;
+  type: string;
+}
+
+export type Track = {
+  kind: "captions";
+  label: string;
+  src: string;
+  srclang: string;
+}
+
+// not fully typed
+export type Options = {
+  courseId: string;
+  sources: Source[];
+  tracks: Track[]
+}
+
+// not fully typed
+export type PlayerData = {
+  cache_: Cache;
+  options_: Options;
+}
\ No newline at end of file
diff --git a/node_modules/vot.js/dist/types/helpers/coursera.js b/node_modules/vot.js/dist/types/helpers/coursera.js
new file mode 100644
index 0000000..0aacd4e
--- /dev/null
+++ b/node_modules/vot.js/dist/types/helpers/coursera.js
@@ -0,0 +1 @@
+export {}
\ No newline at end of file
diff --git a/node_modules/vot.js/dist/utils/helper.d.ts b/node_modules/vot.js/dist/utils/helper.d.ts
index 1f88850..597091f 100644
--- a/node_modules/vot.js/dist/utils/helper.d.ts
+++ b/node_modules/vot.js/dist/utils/helper.d.ts
@@ -6,6 +6,7 @@ import * as BannedVideo from "../types/helpers/bannedvideo.js";
 import * as Kick from "../types/helpers/kick.js";
 import * as Udemy from "../types/helpers/udemy.js";
 import * as Coursehunter from "../types/helpers/coursehunter.js";
+import * as Coursera from "../types/helpers/coursera.js";
 import { VideoService, RequestLang, TranslationHelp } from "../types/yandex.js";
 export declare class MailRuHelper {
     API_ORIGIN: string;
@@ -99,7 +100,7 @@ export declare class UdemyHelper {
         title: string;
         description: string;
         translationHelp: TranslationHelp[] | null;
-        detectedLanguage?: RequestLang
+        detectedLanguage?: RequestLang;
     }>;
 }
 export declare class CoursehunterHelper {
@@ -110,6 +111,19 @@ export declare class CoursehunterHelper {
         title: string;
     }>;
 }
+export declare class CourseraHelper {
+    getCourseData(courseId: number|string): Promise<Coursera.Course>;
+    getPlayer(): HTMLDivElement | null;
+    getPlayerData(): Coursera.PlayerData;
+    findVideoUrl(sources: Coursera.Source[]): string|null;
+    findSubtitleUrl(captions: Coursera.Track[], detectedLanguage: RequestLang): string|null;
+    getVideoData(videoId: string): Promise<false | {
+        url: string;
+        duration: number;
+        translationHelp: TranslationHelp[] | null;
+        detectedLanguage?: RequestLang;
+    }>;
+}
 export declare class AppleDeveloperHelper {
     getVideoData(videoId: string): Promise<{
         url: string;
@@ -125,6 +139,7 @@ export default class VideoHelper {
     static [VideoService.kick]: KickHelper;
     static [VideoService.udemy]: UdemyHelper;
     static [VideoService.coursehunter]: CoursehunterHelper;
+    static [VideoService.coursera]: CourseraHelper;
     static [VideoService.appledeveloper]: AppleDeveloperHelper;
 }
 //# sourceMappingURL=helper.d.ts.map
\ No newline at end of file
diff --git a/node_modules/vot.js/dist/utils/helper.js b/node_modules/vot.js/dist/utils/helper.js
index 750d917..aeba2ba 100644
--- a/node_modules/vot.js/dist/utils/helper.js
+++ b/node_modules/vot.js/dist/utils/helper.js
@@ -1,7 +1,7 @@
 import { getHmacSha1 } from "../secure.js";
 import sites from "../config/sites.js";
 import { fetchWithTimeout } from "./utils.js";
-import { availableLangs } from "../consts";
+import { availableLangs } from "../consts.js";
 import config from "../config/config.js";
 import { VideoService } from "../types/yandex.js";
 import { localizationProvider } from "../../../../src/localization/localizationProvider.js";
@@ -462,13 +462,13 @@ export class UdemyHelper {
         }
 
         const courseLangData = await this.getCourseLang(courseId);
-        let { locale: { locale } } = courseLangData;
-        locale = locale ? langTo6391(locale) : "en";
-        if (!availableLangs.includes(locale)) {
-            locale = "en";
+        let { locale: { locale: courseLang } } = courseLangData;
+        courseLang = courseLang ? langTo6391(courseLang) : "en";
+        if (!availableLangs.includes(courseLang)) {
+            courseLang = "en";
         }
 
-        const subtitleUrl = this.findSubtitleUrl(captions, locale);
+        const subtitleUrl = this.findSubtitleUrl(captions, courseLang);
         if (!subtitleUrl) {
             console.log("Failed to find subtitle file in captions", captions)
         }
@@ -486,7 +486,7 @@ export class UdemyHelper {
                         targetUrl: videoUrl,
                     },
                 ],
-                detectedLanguage: locale,
+                detectedLanguage: courseLang,
             } : {
                 url: videoUrl,
                 translationHelp: null,
@@ -537,6 +537,90 @@ export class AppleDeveloperHelper {
         };
     }
 }
+export class CourseraHelper {
+    API_ORIGIN = "https://www.coursera.org/api";
+
+    async getCourseData(courseId) {
+        const response = await GM_fetch(
+            `${this.API_ORIGIN}/onDemandCourses.v1/${courseId}`,
+        );
+        const resJSON = await response.json();
+        return resJSON?.elements?.[0];
+    }
+
+    getPlayer() {
+        return document.querySelector(".vjs-v6");
+    }
+
+    getPlayerData() {
+        return this.getPlayer()?.player;
+    }
+
+    findVideoUrl(sources) {
+        return sources?.find((src) => src.type === "video/mp4")?.src;
+    }
+
+    findSubtitleUrl(captions, detectedLanguage) {
+        let subtitle = captions?.find(
+            (caption) => langTo6391(caption.srclang) === detectedLanguage,
+        );
+
+        if (!subtitle) {
+            subtitle = captions?.find(
+                (caption) => langTo6391(caption.srclang) === "en",
+            ) || captions?.[0];
+        }
+
+        return subtitle?.src;
+    }
+
+    async getVideoData(videoId) {
+        const data = this.getPlayerData();
+
+        const { duration } = data?.cache_ || {};
+        const { courseId, tracks, sources } = data?.options_ || {};
+
+        const videoUrl = this.findVideoUrl(sources);
+        if (!videoUrl) {
+            console.log("Failed to find .mp4 video file in sources", sources);
+            return false;
+        }
+
+        const { primaryLanguageCodes } = await this.getCourseData(courseId);
+        let courseLang = primaryLanguageCodes?.[0];
+        courseLang = courseLang ? langTo6391(courseLang) : "en";
+
+        if (!availableLangs.includes(courseLang)) {
+            courseLang = "en";
+        }
+
+        const subtitleUrl = this.findSubtitleUrl(tracks, courseLang);
+        if (!subtitleUrl) {
+            console.log("Failed to find subtitle file in tracks", tracks)
+        }
+
+        return {
+            ...subtitleUrl ? {
+                url: sites.find((s) => s.host === VideoService.coursera).url + videoId,
+                translationHelp: [
+                    {
+                        target: "subtitles_file_url",
+                        targetUrl: subtitleUrl,
+                    },
+                    {
+                        target: "video_file_url",
+                        targetUrl: videoUrl,
+                    },
+                ],
+                detectedLanguage: courseLang,
+            } : {
+                url: videoUrl,
+                translationHelp: null,
+            },
+            duration,
+        };
+    }
+}
 export default class VideoHelper {
     static [VideoService.mailru] = new MailRuHelper();
     static [VideoService.weverse] = new WeverseHelper();
@@ -547,5 +631,6 @@ export default class VideoHelper {
     static [VideoService.kick] = new KickHelper();
     static [VideoService.udemy] = new UdemyHelper();
     static [VideoService.coursehunter] = new CoursehunterHelper();
+    static [VideoService.coursera] = new CourseraHelper();
     static [VideoService.appledeveloper] = new AppleDeveloperHelper();
 }
