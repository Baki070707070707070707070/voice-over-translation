diff --git a/node_modules/vot.js/dist/utils/videoData.d.ts b/node_modules/vot.js/dist/utils/videoData.d.ts
index f69bc0a..158777c 100644
--- a/node_modules/vot.js/dist/utils/videoData.d.ts
+++ b/node_modules/vot.js/dist/utils/videoData.d.ts
@@ -1,6 +1,6 @@
 import { ServiceConf } from "../types/yandex.js";
 import { GetVideoDataOpts, VideoData } from "../types/client.js";
-export declare function getService(videoUrl: string): false | ServiceConf | undefined;
-export declare function getVideoID(service: ServiceConf, videoURL: string, opts?: GetVideoDataOpts): Promise<string | null | undefined>;
-export declare function getVideoData(url: string, opts?: GetVideoDataOpts): Promise<VideoData>;
+export declare function getService(): false | ServiceConf | undefined;
+export declare function getVideoID(service: ServiceConf, video: HTMLVideoElement, opts?: GetVideoDataOpts): Promise<string | null | undefined>;
+export declare function getVideoData(service: ServiceConf, video: HTMLVideoElement, opts?: GetVideoDataOpts): Promise<VideoData>;
 //# sourceMappingURL=videoData.d.ts.map
\ No newline at end of file
diff --git a/node_modules/vot.js/dist/utils/videoData.js b/node_modules/vot.js/dist/utils/videoData.js
index b538d1c..e1c89fa 100644
--- a/node_modules/vot.js/dist/utils/videoData.js
+++ b/node_modules/vot.js/dist/utils/videoData.js
@@ -8,18 +8,11 @@ class VideoDataError extends Error {
         this.message = message;
     }
 }
-export function getService(videoUrl) {
-    if (/(file:\/\/|(http(s)?:\/\/)(127\.0\.0\.1|localhost))/.exec(videoUrl))
-        return false;
-    let enteredURL;
-    try {
-        enteredURL = new URL(videoUrl);
-    }
-    catch {
-        console.error(`Invalid URL: ${videoUrl}. Have you forgotten https?`);
-        return false;
-    }
-    const hostname = enteredURL.hostname;
+export function getService() {
+    if (/(http(s)?:\/\/)(127\.0\.0\.1|localhost)/.exec(window.location.href))
+        return [];
+    const hostname = window.location.hostname;
+    const enteredURL = new URL(window.location);
     const isMathes = (match) => {
         if (match instanceof RegExp) {
             return match.test(hostname);
@@ -32,14 +25,14 @@ export function getService(videoUrl) {
         }
         return false;
     };
-    return sites.find((e) => {
+    return sites.filter((e) => {
         return ((Array.isArray(e.match) ? e.match.some(isMathes) : isMathes(e.match)) &&
             e.host &&
             e.url);
     });
 }
-export async function getVideoID(service, videoURL, opts = {}) {
-    const url = new URL(videoURL);
+export async function getVideoID(service, video, opts = {}) {
+    const url = new URL(window.location.href);
     const serviceHost = service.host;
     if (Object.keys(availableHelpers).includes(serviceHost)) {
         const helper = new VideoHelper(opts).getHelper(serviceHost);
@@ -99,15 +92,22 @@ export async function getVideoID(service, videoURL, opts = {}) {
         case VideoService.peertube:
             return /\/w\/([^/]+)/.exec(url.pathname)?.[0];
         case VideoService.dailymotion: {
-            return url.hostname === "dai.ly"
-                ? url.pathname.slice(1)
-                : /video\/([^/]+)/.exec(url.pathname)?.[1];
+            // we work in the context of the player
+            // geo.dailymotion.com
+            const plainPlayerConfig = Array.from(
+                document.querySelectorAll("*"),
+            ).filter((s) => s.innerHTML.trim().includes(".m3u8"));
+            let videoUrl = plainPlayerConfig?.[1]?.lastChild?.src;
+            if (!videoUrl) {
+                return undefined
+            }
+            return /\/video\/(\w+)\.m3u8/.exec(videoUrl)?.[1];
         }
         case VideoService.okru: {
             return /\/video\/(\d+)/.exec(url.pathname)?.[1];
         }
         case VideoService.googledrive:
-            return /\/file\/d\/([^/]+)/.exec(url.pathname)?.[1];
+            return url.searchParams.get("docid");
         case VideoService.newgrounds:
             return /([^/]+)\/(view)\/([^/]+)/.exec(url.pathname)?.[0];
         case VideoService.egghead:
@@ -122,17 +122,13 @@ export async function getVideoID(service, videoURL, opts = {}) {
             return undefined;
     }
 }
-export async function getVideoData(url, opts = {}) {
-    const service = getService(url);
-    if (!service) {
-        throw new VideoDataError(`URL: "${url}" is unknown service`);
-    }
-    const videoId = await getVideoID(service, url, opts);
+export async function getVideoData(service, video, opts = {}) {
+    const videoId = await getVideoID(service, video, opts);
     if (!videoId) {
-        throw new VideoDataError(`Entered unsupported link: "${url}"`);
+        throw new VideoDataError(`Entered unsupported link: "${service.host}"`);
     }
     if (service.host === VideoService.peertube) {
-        service.url = new URL(url).origin;
+        service.url = window.location.origin;
     }
     if (service.rawResult) {
         return {
